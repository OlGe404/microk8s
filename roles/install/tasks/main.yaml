---
- name: install microk8s via snap
  become: true
  snap:
    name: microk8s
    classic: yes
    channel: "{{ version }}"

- name: add the current user to the microk8s group
  become: true
  user:
    name: "{{ lookup('env', 'USER') }}"
    groups: ["microk8s"]
    append: yes

- name: append aliases for common microk8s commands to the {{ lookup('env', 'HOME') }}/.bash_aliases file
  block:
    - name: create {{ lookup('env', 'HOME') }}/.bash_aliases if it doesn't exist
      copy:
        content: ""
        dest: "{{ lookup('env', 'HOME') }}/.bash_aliases"
        force: no
        mode: "0644"
        owner: "{{ lookup('env', 'USER') }}"

    - name: append aliases
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.bash_aliases"
        marker: "# {mark} ANSIBLE MICROK8S"
        block: |-
          alias m8s='microk8s'
          alias mk='microk8s kubectl'
          alias mksys='microk8s kubectl config set-context --current --namespace kube-system'

- name: generate {{ lookup('env', 'HOME') }}/.kube/microk8s_config
  block:
    - name: create {{ lookup('env', 'HOME') }}/.kube dir
      file:
        dest: "{{ lookup('env', 'HOME') }}/.kube"
        state: directory
        mode: "0755"

    - name: create {{ lookup('env', 'HOME') }}/.kube/microk8s_config file
      shell: "microk8s config | tee {{ lookup('env', 'HOME') }}/.kube/microk8s_config"
      args:
        creates: "{{ lookup('env', 'HOME') }}/.kube/microk8s_config"

    - name: set owner
      file:
        path: "{{ lookup('env', 'HOME') }}/.kube/microk8s_config"
        owner: "{{ lookup('env', 'USER') }}"
        mode: "0600"

- name: start microk8s
  command: /snap/bin/microk8s.start
  register: start_microk8s
  changed_when: "'Started.' not in start_microk8s.stdout"

- name: fix vxlan adapter
  command: >
    microk8s kubectl set env ds/calico-node 
    IP_AUTODETECTION_METHOD="interface={{ vxlan.interface }}" 
    --namespace kube-system
  when: vxlan.fix|bool

- name: restart all kube-system pods after fixing the vxlan adapter
  command: >
    microk8s kubectl delete pods 
    --namespace kube-system 
    --all
  when: vxlan.fix|bool